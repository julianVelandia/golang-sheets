// Code generated by mockery v2.14.0. DO NOT EDIT.

package getcell_test

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	model "github.com/julianVelandia/golang-sheets/internal/platform/sheets/model"
	query "github.com/julianVelandia/golang-sheets/internal/cell/core/query"
)

// RepositoryReadMock is an autogenerated mock type for the RepositoryRead type
type RepositoryReadMock struct {
	mock.Mock
}

// GetByQuery provides a mock function with given fields: ctx, queryValue
func (_m *RepositoryReadMock) GetByQuery(ctx context.Context, queryValue query.GetCells) ([]model.Cell, error) {
	ret := _m.Called(ctx, queryValue)

	var r0 []model.Cell
	if rf, ok := ret.Get(0).(func(context.Context, query.GetCells) []model.Cell); ok {
		r0 = rf(ctx, queryValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Cell)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, query.GetCells) error); ok {
		r1 = rf(ctx, queryValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryReadMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryReadMock creates a new instance of RepositoryReadMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryReadMock(t mockConstructorTestingTNewRepositoryReadMock) *RepositoryReadMock {
	mock := &RepositoryReadMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
