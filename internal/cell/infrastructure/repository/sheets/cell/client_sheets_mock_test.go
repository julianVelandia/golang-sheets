// Code generated by mockery v2.14.0. DO NOT EDIT.

package cell_test

import (
	context "context"

	query "github.com/julianVelandia/golang-sheets/internal/cell/core/query"
	model "github.com/julianVelandia/golang-sheets/internal/platform/sheets/model"
	mock "github.com/stretchr/testify/mock"
)

// ClientSheetsMock is an autogenerated mock type for the ClientSheets type
type ClientSheetsMock struct {
	mock.Mock
}

// Read provides a mock function with given fields: ctx, credentialsPath, spreadsheetIDPath, readRange
func (_m *ClientSheetsMock) Read(ctx context.Context, credentialsPath string, spreadsheetIDPath string, readRange query.GetCells) ([]model.Cell, error) {
	ret := _m.Called(ctx, credentialsPath, spreadsheetIDPath, readRange)

	var r0 []model.Cell
	if rf, ok := ret.Get(0).(func(context.Context, string, string, query.GetCells) []model.Cell); ok {
		r0 = rf(ctx, credentialsPath, spreadsheetIDPath, readRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Cell)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, query.GetCells) error); ok {
		r1 = rf(ctx, credentialsPath, spreadsheetIDPath, readRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientSheetsMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientSheetsMock creates a new instance of ClientSheetsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientSheetsMock(t mockConstructorTestingTNewClientSheetsMock) *ClientSheetsMock {
	mock := &ClientSheetsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
